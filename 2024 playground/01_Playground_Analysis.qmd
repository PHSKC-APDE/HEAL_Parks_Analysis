---
title: "HEAL Parks: 2024 Playground Analysis"
author: "Ronald W. Buie"
date-modified: "`r Sys.Date()`"

format:
  gfm: 
    output-file: "README.md"
    number-sections: true
    fig-height: 12
    fig-width: 16
    prefer-html: true
  pdf:
    toc: true
    number-sections: true
    df-print: kable
    fig-height: 8
    fig-width: 10
  html:
    toc: true
    number-sections: true
    df-print: kable
    fig-height: 10
    fig-width: 13
  docx:
    toc: false
    number-sections: true
    output: false
    df-print: kable
    fig-height: 8
    fig-width: 10
execute: 
  echo: false
  warning: false
  output: true
---

# Front Matter

This document outlines procedures, technical considerations, and analytic results for a 2024 analysis of playgrounds within parks participating in the HEAL Parks Study. The primary purpose of this PDF is technical review by analysts and project managers to confirm the process and data quality.

For general information about the project please review the [git](https://github.com/PHSKC-APDE/HEAL_Parks_Analysis), contact Seth Schromen-Wawrin.

## Goal 

Identify differences in park use access and share findings with parks agencies to inform their planning and investments

## Objective

Test the ability of park use observation data to compare how park features are used between parks. Use the results from this analysis to inform the understanding of facility access and quality. This pilot will focus on comparing use of playground features

## Partners

Public Health – Seattle & King County

King County Parks

Tukwila Parks and Recreation

Burien Parks, Recreation, and Cultural Services

King County Play Equity Coalition

## Geography

The contiguous area of Burien, North Highline, Skyway, Tukwila, and White Center

# Background

The Healthy Eating Active Living (HEAL) initiative includes a family of studies aimed at identifying the availability and impact of parks on King County residents. This effort includes an annual study measuring who is using the parks, when they are using them, and what they are doing. In 2024, parks' managers identified playground use as an area of possible interest to focus their efforts. The below analysis has been conducted in response to research questions proposed by the parks' managers. These exploratory analyses are intended to inform further discussion of how we may pursue research and reporting of playground use that supports parks' and the county's interest in the public health and our broader equity and social justice goals.

## Research Questions

The below research questions were proposed by the parks' managers in collaboration with the HEAL team.

* How does the observed use of playgrounds differ between parks located in opportunity areas and parks not located in opportunity areas  ?
* How does the observed use of playgrounds differ between parks of similar park categories?
* How does the observed use of playgrounds differ between playgrounds with different complexities of playgrounds?
* How does the observed use of playgrounds compare to the age of the playground?
* How does the observed use of playgrounds differ when a park includes certain features?
* How does the age of observed playground users differ between park groups (size, feature qualities, etc.)?
* How accessible is the park by transportation?

# Analytical Methods



```{r setup}
# First check if pacman is installed. If not, install it.
if(!"pacman" %in% installed.packages()) {
  install.packages("pacman")
}


# load and install packages using pacman. 
# Pacman will install and load missing packages.
pacman::p_load(doParallel,  #parallalize loops, including geography calculation
               scales, #format ggplot2 axes
               sf, #create spatial objects around long and lat
               kcparcelpop,
               rads, #access apde data
               spatagg, #geospatial maping for populations
               flextable, #generate pretty tables in word
               officer, #generate word docs
               openxlsx2, #read xlsx files
               ggplot2, #create pretty charts
               here,  #simplify calls to local directory
               RCurl, #prepare and parse json/API querries
               jsonlite, #parse json results
               data.table, #data structure and analytics framework used throughout
               kableExtra, #kable extension used to generate pretty output
               utils, #modify directory and file structures
               treemapify) #generate treemaps in ggplot


#configure any package specific options here
options(knitr.table.format = "latex") 

#constants
#CHARTWIDTH <- 3.5 #width for charts to generate for reproduciton
#CHARTHEIGHT <- 2.3 #height of charts to generate for reproduction
RECALCULATEPOPULATIONS <- FALSE
PARALLEL_PROCESS <- TRUE
```

## Major inputs

The following inputs to this script are contained at ./inputs/*.* and include

-   A file of park meta data, including address, zip, city, neighborhood, official name, and REDCap name for each park
-   A file of collected SOPARC observations, aggregated to the period level, currently updated for 2022-2024
-   An accompanying file of SOPARC activities, currently updated for 2022-2024

In addition, access to APDE's population estimates, or calculated population estimates for children living within 1/2 mile for all parks included in the analysis.

## Output categories

-   documentation - this documentation and analysis results as document files
-   tables - tabular outputs of analysis, generally in xlsx format
-   charts - chart outputs of analysis, generally in pdf and/or png format

```{r create target directories}

dir.create("./outputs/charts", recursive = TRUE, showWarnings = FALSE)
dir.create("./outputs/tables", recursive = TRUE, showWarnings = FALSE)
# dir.create("./2024 playground/outputs/data-metadata", recursive = TRUE, showWarnings = FALSE)
```

## Setup & Environment

This script was last executed using `r version$version.string`.

```{r define helpful functions}

integer_breaks <- function(n = 5, ...) {
  #accespt none
  #returns break point
  #used to get integers on short axies in ggplot
  # by Joshua Cook: https://www.r-bloggers.com/2019/11/setting-axes-to-integer-values-in-ggplot2/

  fxn <- function(x) {
  breaks <- floor(pretty(x, n, ...))
  names(breaks) <- attr(breaks, "labels")
  breaks
  }
return(fxn)
}

```

# Data Preperation

This analysis relies on the below data sources. Please contact Ronald W. Buie or Seth Schromen-Wawrin for details.

*2022-2024 park observation data (PHSKC
* Park Category – (Burien, Tukwila, KC Parks) 
* Playground Age – installation date (Burien, Tukwila, KC Parks)
* Playground and Park additional features (Burien, Tukwila, KC Parks)
  * Restroom
  * Sports field
  * Picnic area
  * Playground age group
  * Playground complexity
  * Opportunity areas (KC Parks)
*Walkscore/Transitscore of park (derived from walkscore.com)
*Census data on population surrounding park (within ½ mile):
  * Total population
  * Population of people 0 to 15 years of age


```{r import data}
ParkObservations <- fread("./inputs/SOPARCAnalysisSetAggregatedPeriodsAllYears.csv")



ParksActivities <- fread("./inputs/SOPARCActivitiesAllYearsExpanded.csv")


ParkSupplamentalInfo <- as.data.table(read_xlsx("./inputs/Parks_MASTER.xlsx", sheet = "2024Supplemental"))

ParkSupplamentalInfo[ParkSupplamentalInfo$Restroom == "Yes ",]$Restroom <- "Yes"
ParkSupplamentalInfo[ParkSupplamentalInfo$`Primary_Age_Group_2-5` == "Yes ",]$`Primary_Age_Group_2-5` <- "Yes"
ParkSupplamentalInfo[Playground_Age %in% c("tbd", "n/a"),]$Playground_Age <- NA


ParkFacilities <- as.data.table(read_xlsx("./inputs/Parks_MASTER.xlsx", sheet = "ParkFacility"))[,1:4]
ParkFacilities$playground <- 0
ParkFacilities[grepl( "Playground",paste0(ParkFacilities$`Prim Facility`, ParkFacilities$`Sec Facility`),ignore.case = T),"playground"] <- 1

ParkMetadata <- as.data.table(read_xlsx("./inputs/Parks_MASTER.xlsx", sheet = "ParkList"))
```

```{r merged tables}
#these are tables used in most/all analyses

ParkFull <- as.data.table(merge(ParkObservations, ParkSupplamentalInfo[,-c("City", "Park Address")], by.x = "park_name", by.y = "Park Name"))

#unique(ParkObservations$park_name[!(ParkObservations$park_name %in% ParkSupplamentalInfo$`Park Name`)])
```

```{r merging facility info}


ParkFull <- merge(ParkFull, ParkFacilities, by.x = c("park_name", "tar_area"), by.y = c("Park Name", "Scan Area"), all.x = TRUE)

```

```{r keeping only parks with playgrounds}

for(park in unique(ParkFull$park_name)) {
  if(nrow(ParkFull[park_name == park & playground == 1,]) == 0) {
    ParkFull <- ParkFull[park_name != park,]
  }
}
#unique(ParkFull[studyDescription == "2024 annual study",park_name])
#unique(ParkFacilities[playground == 1,`Park Name`])
#unique(ParkFull[studyDescription == "2024 annual study",park_name])
#unique(ParkFacilities[,`Park Name`])
#unique(ParkFull[studyDescription == "2024 annual study",park_name]) %in% unique(ParkFacilities[playground == 1,`Park Name`])


```

## Variable Definitions

*	“Park Category”:   category of park’s intended reach, set by Parks Department
  *	‘Neighborhood Park’ = park intended to draw from more local area 
  *	‘Regional Park’ = park intended to draw from the entire city or region
*	“Opportunity Areas”: yes/no field for if park is located in an Opportunity Area for health and economics, per King County Parks analysis.
*	“Park Includes”: Yes/no fields if the park contains this feature (each individual).
  *	‘Restroom’ = restroom facility (permanent or temporary)
  *	‘Picnic Area’ = area with tables and benches
  *	‘Sport Fields’ = area designated for organized team sports (all conditions). 
*	“Play Structures ”: number of unique play structures that are physically separated and designed for use by more than one person at a time.
*	“Play Elements ”: number of unique opportunities in playground for a type movement/activity. Movement/activities include: climbing, sliding, spinning, crawling, swinging, balancing, playing with sand, and water play (e.g., splash pads).
*	Additional variables for: 
  *	‘Water’ = Includes water play area / splashpad.
  *	‘Inclusive’ = Design goes beyond ADA compliance for different physical, sensory, social, and intellectual abilities to play together
*	“Playground Age”: Year that the playground was installed or last significantly updated.
*	“Primary Age Group”: Category of ‘2-5 years old’ or ‘5-12 years old’. Swing features included in 5-12; a playground is not fit 2-5 if it only has toddler bucket swings. Can be both categories.
*	“Average Playground Use”: Average number of observed users across all observation days.
*	“Peak Playground Use”: Most number of observed users found during a single observation day.
*	“Playground Popularity”: Proportion of park users observed in playground.
*	“Park Catchment”: Population within ½ mile of park (park of original data analysis).
*	“Youth Park Catchment”: Population less than 15 years of age within ½ mile of park.


### Park catchment

Some analyses require park catchment information. We use the population within .5 miles of a central coordinate for the park. All ages population is provided in the data set generated by our annual analysis. For this playground study we also calculate the population of 0-14 year olds within 0.5 miles of each park.

```{r calculate population of children}
#this chunk is very slow, so if the data already exists, do not rerun.
skip <- FALSE
if(file.exists("./inputs/Child Park Populations.csv")){
  ChildParkPopulationTable <- fread("./inputs/Child Park Populations.csv")
  if("childPopulationHalfMile" %in% names(ChildParkPopulationTable) &
     all(unique(ParkFull$park_name) %in% ChildParkPopulationTable[childCensusYear == 2023,]$park_name)) {
    skip <- TRUE #yay no need to calculate 
  }
}
if(!skip | RECALCULATEPOPULATIONS) {
  
  
  
  crsString <- "EPSG:2926" #preferred coordinate reference system for WA
  
  ParkGeos <- unique.data.frame(ParkFull[,.("park" = park_name, "long" = Longitude, "lat" = Latitude)]) #create a prototype data frame for holding our geometry. This has the raw lat long data
  
  ParkGeos <- st_as_sf(x = ParkGeos,coords = c("long","lat"), crs = "EPSG:4326") #turn teh raw data into a geometry using crs 2926 (this is one recomended for WA)
  ParkGeos <- st_transform(ParkGeos, st_crs(crsString))
  ParkGeos <- st_buffer(ParkGeos, units::set_units(0.5, mile)) # units::set_units is intelligent about types of units so you can specify "mile". st_buffer will create a perimeter of the provided units.
  
  BlockShapes <- st_read("//dphcifs/APDE-CDIP/Shapefiles/Census_2020/block/kc_block.shp") 
  BlockShapes <- st_transform(BlockShapes, st_crs(crsString)) #conform to same crs
  
  # ggplot() + geom_sf(data = BlockShapes, fill = NA) +
  #   geom_sf(data = ParkGeos, fill = NA, color = 'purple')
  
  #get KC population estimates. Note, if a radius desired extends outside the county, then need to expand. Will greatly slow down calculations
  #if not saved, pull and save. Otherwise, load from save
  if(file.exists("./inputs/KCChildPops.csv")) {
    KCPops <- read.csv("./inputs/KCChildPops.csv")
  } else {
    KCPops <- get_population(geo_type = "blk", kingco = T, year = 2023, ages = 0:14)
    write.csv(x = KCPops, "./inputs/KCChildPops.csv", row.names = F)
  }
  
  #Create data frame for final results
  ChildParkPopulationTable <- data.table("park_name" = unique(ParkFull$park_name), "childCensusYear" = 2023, "childPopulationHalfMile" = 0)
  
#  if(PARALLEL_PROCESS){
#  numCores <- detectCores()-1
#  cl <- makeCluster(numCores, outfile = "")
#  registerDoParallel(cl)
#  ChildParkPopulationTable[parkNameFull == ParkGeos[rowIndex,]$park, ]$childPopulationHalfMile <- foreach (rowIndex = 1:nrow(ParkGeos), #.combine=rbind) %dopar% {
#    CW <- create_xwalk(BlockShapes, ParkGeos[rowIndex,], "GEOID20", "park",min_overlap = 0.00001)
#    CWPop <- merge(CW, KCPops, by.x = "source_id", by.y = "geo_id")
#    weightedPop <- sum(CWPop$s2t_fraction * CWPop$pop)
#    weightedPop 
#  }
#  stopCluster(cl)
#} else {
  #loop through parks and generate crosswalk for each park.
  for(rowIndex in 1:nrow(ParkGeos)) {
    CW <- create_xwalk(BlockShapes, ParkGeos[rowIndex,], "GEOID20", "park",min_overlap = 0.00001)
    CWPop <- merge(CW, KCPops, by.x = "source_id", by.y = "geo_id")
    weightedPop <- sum(CWPop$s2t_fraction * CWPop$pop)
    
    ChildParkPopulationTable[park_name == ParkGeos[rowIndex,]$park, ]$childPopulationHalfMile <- weightedPop 
    #print(paste0("Completed #", rowIndex," (",ParkGeos[rowIndex,park],")"))
    print(paste0("Completed ", rowIndex, " of ", nrow(ParkGeos)))
  }
#}
  


  write.csv(ChildParkPopulationTable , "./outputs/Child Park Populations.csv", row.names = F)
  write.csv(ChildParkPopulationTable ,"./inputs/Child Park Populations.csv", row.names = F)
}

  
ParkFull <- merge(ParkFull, ChildParkPopulationTable, by = "park_name")

```


# Analyses

The below analyses are exploratory, descriptive, statistics to support further investigation into the equitable use and maintenance of municipal parks across King County. In providing these results we hope to facilitate discussion around this work and how to proceed going forward. 

Some important questions to ask as you review these results are:

- Do the results appear reasonable, or do the numbers for some parks appear unlikely to be accurate?
- Do the proposed questions seem valuable to ask?
- For a given analysis, is it well defined and are the data accurate?
- For a given analysis, is this a helpful way to present the results?
- Do any results suggest that we should investigate further, if possible?
- Do any results suggest that we should not investigate further?


Notes:

- The below analyses are limited to 2024 observation data. In future versions, we expect to include data from all years.
```{r}
#limiting study to 2024 data until calculations are fixed for multi-year
ParkFull <- ParkFull[studyDescription == "2024 annual study",]

```

- Analyses of "average park use" aggregate all playground target areas within the park (effectively calculated as one large playground)

- Multiple park characteristics in the supplemental information file have n/a or tbd for parks that, including for parks that have playgrounds. Depending on the analysis, these may be suppressed, or show up as NA, tbd, or 0

## Analyses of park catchment and status

These analyses explore the relationship between classification and funding status of a park and the surrounding population. Park catchment may, additionally, provide context for later analyses below.

### chart of park catchment

```{r}
DT <- copy(ParkFull)

DTplot <- unique(DT[, .(park_name, populationHalfMile)])

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name, populationHalfMile), x = populationHalfMile)) +
  #facet_wrap(.~Opportunity_Area, scales = "free_y") +
  xlab("Population Within 1/2 Mile") +
  ylab("Park Name") +
  ggtitle("Park Catchment") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)



```

### chart of 0-14 park catchment

```{r}
DT <- copy(ParkFull)

DTplot <- unique(DT[, .(park_name, childPopulationHalfMile)])

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name, childPopulationHalfMile), x = childPopulationHalfMile)) +
  #facet_wrap(.~Opportunity_Area, scales = "free_y") +
  xlab("Children 0-14 within 1/2 Mile") +
  ylab("Park Name") +
  ggtitle("0-14 Year Old Park Catchment") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)



```

### chart of park catchment by opportunity area

```{r}
DT <- copy(ParkFull)

DTplot <- unique(DT[, .(park_name, populationHalfMile, Opportunity_Area)])

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name, populationHalfMile), x = populationHalfMile)) +
  facet_wrap(.~Opportunity_Area, scales = "free_y") +
  xlab("Population Within 1/2 Mile") +
  ylab("Park Name") +
  ggtitle("Catchment Given Opportunity Area Status") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)



```

### chart of 0-14 park catchment by opportunity area

```{r}

DT <- copy(ParkFull)

DTplot <- unique(DT[, .(park_name, childPopulationHalfMile, Opportunity_Area)])

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack",aes(y = reorder(park_name, childPopulationHalfMile), x = childPopulationHalfMile)) +
  facet_wrap( ~Opportunity_Area, scales = "free_y") +
  xlab("0-14 Population Within 1/2 Mile") +
  ylab("Park Name") +
  ggtitle("0-14 Year Old Catchment Given Opportunity Area Status") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)

```

### chart of park catchment by park category

```{r}
DT <- copy(ParkFull)

DTplot <- unique(DT[, .(park_name, populationHalfMile, Park_Category_Local)])

ggplot(DTplot[!is.na(Park_Category_Local),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name,populationHalfMile), x = populationHalfMile)) +
  #facet_grid(Park_Category_Local ~ ., scales = "free_y", space = "free") +
  facet_wrap(~Park_Category_Local, scales = "free_y", ncol = 2) +
  xlab("Population Within 1/2 Mile") +
  ylab("Park Name") +
  ggtitle("Catchment Given Park Category") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

### chart of 0-14 park catchment by park category

```{r}

DT <- copy(ParkFull)

DTplot <- unique(DT[, .(park_name, childPopulationHalfMile, Park_Category_Local)])

ggplot(DTplot[!is.na(Park_Category_Local)]) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name,childPopulationHalfMile), x = childPopulationHalfMile)) +
  #facet_grid(.~Park_Category_Local, scales = "free_y", space = "free") +
  facet_wrap(~Park_Category_Local, scales = "free_y", ncol = 2) +
  xlab("0-14 Population Within 1/2 Mile") +
  ylab("Park Name") +
  ggtitle("0-14 Year Old Catchment Given Park Category") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)

```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`


## Analyses of playground use

The below analyses explore relationships of the number of people observed in playgrounds and other characteristics or status of the park. We refer to this number of observed users as "use". For most of these analyses, use is provided in three forms, the average number of users observed across all observed days, the median number of users across all days, and the peak number of users across all days.

### playground use by opportunity area

#### chart of average playground use by opportunity area

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Opportunity_Area, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Opportunity_Area, park_name)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = avg_Daily_Users)) +
  facet_wrap(~Opportunity_Area, scales = "free_y") +
  xlab("Average Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Average Daily Number of Playground Users Given \n Opportunity Area Status") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

#### chart of median playground use by opportunity area

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Opportunity_Area, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( Opportunity_Area, park_name)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = med_Daily_Users)) +
  facet_wrap(~Opportunity_Area, scales = "free_y") +
  xlab("Median Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Median Daily Number of Playground Users Given \n Opportunity Area Status") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

#### chart of peak playground use by opportunity area

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(max_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Opportunity_Area, park_name)][,lapply(.SD, max, na.rm = TRUE), .SDcols = c("max_Daily_Users") ,by = .( Opportunity_Area, park_name)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = max_Daily_Users)) +
  facet_wrap(~Opportunity_Area, scales = "free_y") +
  xlab("Max Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Max Daily number of Playground Users Given \n Opportunity Area Status") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

### playground use by park category

#### chart of average playground use by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Park_Category_Local, park_name)]

ggplot(DTplot[!(is.na(Park_Category_Local)),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name, avg_Daily_Users), x = avg_Daily_Users)) +
  #facet_grid(. ~ Park_Category_Local, scales = "free", space = "fixed") +
  facet_wrap(~Park_Category_Local, scales = "free_y", ncol = 2) +
  xlab("Average daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Average Daily Number of Playground Users Given \n Park Category") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

#### chart of median playground use by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(median_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("median_Daily_Users") ,by = .( Park_Category_Local, park_name)]

ggplot(DTplot[!(is.na(Park_Category_Local)),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name, median_Daily_Users), x = median_Daily_Users)) +
  #facet_grid(~Park_Category_Local, scales = "free_y", space = "free") +
  facet_wrap(~Park_Category_Local, scales = "free_y", ncol = 2) +
  xlab("Median daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Median Daily Number of Playground Users Given \n Park Category") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

#### chart of peak playground use by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(max_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, park_name)][,lapply(.SD, max, na.rm = TRUE), .SDcols = c("max_Daily_Users") ,by = .( Park_Category_Local, park_name)]

ggplot(DTplot[!(is.na(Park_Category_Local)),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name,max_Daily_Users), x = max_Daily_Users)) +
  #facet_grid(~Park_Category_Local, scales = "free_y", space = "free") +
  facet_wrap(~Park_Category_Local, scales = "free_y", ncol = 2) +
  xlab("Max daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Max Daily Number of Playground Users Given \n Park Category") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

### playground use by play elements

#### chart of average playground use by play elements

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Elements, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Elements, park_name)][, Elements := as.numeric(Elements)]


ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = Elements, fill = avg_Daily_Users, y = reorder(park_name, Elements))) +
  xlab("Number of Elements") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Average Daily Users")) +
  ggtitle("Average Daily Number of Playground Users Given \n Number of Elements") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

#### chart of median playground use by play elements

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Elements, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( Elements, park_name)][, Elements := as.numeric(Elements)]


ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = Elements, fill = med_Daily_Users, y = reorder(park_name, Elements))) +
  xlab("Number of Elements") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Median Daily Users")) +
  ggtitle("Median Daily Number of Playground Users Given \n Number of Elements") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

#### chart of peak playground use by play elements

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(max_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Elements, park_name)][,lapply(.SD, max, na.rm = TRUE), .SDcols = c("max_Daily_Users") ,by = .( Elements, park_name)][, Elements := as.numeric(Elements)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = Elements, fill = max_Daily_Users, y = reorder(park_name, Elements))) +
  xlab("Number of Elements") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Max Daily Users")) +
  ggtitle("Max Daily Number of Playground Users Given \n Number of Elements") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")
```

### playground use by playground age

#### chart of average playground use by playground age

```{r}
DT <- copy(ParkFull)

DTplot <- DT[, Playground_Age := (2024-as.numeric(DT$Playground_Age)) +1][playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Playground_Age, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Playground_Age, park_name)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = as.numeric(Playground_Age), fill = avg_Daily_Users, y = reorder(park_name, Playground_Age))) +
  xlab("Years Age of Playground (1 = Built in 2024)") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Average Daily Users")) +
  ggtitle("Average Daily Number of Playground Users Given \n Playground Age") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

Notes:

The following parks were excluded for not having playground age: `r unique(DTplot[is.na(Playground_Age),park_name])`

#### chart of median playground use by playground age

```{r}
DT <- copy(ParkFull)

DTplot <- DT[, Playground_Age := (2024-as.numeric(DT$Playground_Age)) +1][playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Playground_Age, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( Playground_Age, park_name)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = as.numeric(Playground_Age), fill = med_Daily_Users, y = reorder(park_name, Playground_Age))) +
  xlab("Years Age of Playground (1 = Built in 2024)") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Median Daily Users")) +
  ggtitle("Median Daily Number of Playground Users Given \n Playground Age") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

Notes:

The following parks were excluded for not having playground age: `r unique(DTplot[is.na(Playground_Age),park_name])`

#### chart of peak playground use by playground age

```{r}
DT <- copy(ParkFull)

DTplot <- DT[, Playground_Age := (2024-as.numeric(DT$Playground_Age)) +1][playground == 1, .(max_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Playground_Age, park_name)][,lapply(.SD, max, na.rm = TRUE), .SDcols = c("max_Daily_Users") ,by = .( Playground_Age, park_name)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = as.numeric(Playground_Age), fill = max_Daily_Users, y = reorder(park_name, Playground_Age))) +
  xlab("Years Age of Playground (1 = Built in 2024)") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Max Daily Users")) +
  ggtitle("Max Number of Playground Users Given \n Playground Age") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")



```

Notes:

The following parks were excluded for not having playground age: `r unique(DTplot[is.na(Playground_Age),park_name])`


### playground use by restroom status and park category

#### chart of average playground use by restroom status and by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, Restroom, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Park_Category_Local, Restroom,park_name)]

ggplot(DTplot[!is.na(Park_Category_Local),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = avg_Daily_Users)) +
  facet_grid(Restroom~Park_Category_Local, scales = "free_y") +
  xlab("Average Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Average Daily Number of Playground Users Given \n Category and Restroom") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

#### chart of median playground use by restroom status and by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, Restroom, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( Park_Category_Local, Restroom,park_name)]

ggplot(DTplot[!is.na(Park_Category_Local),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = med_Daily_Users)) +
  facet_grid(Restroom~Park_Category_Local, scales = "free_y") +
  xlab("Median Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Median Daily Number of Playground Users Given \n Category and Restroom") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

### playground use by picnic area status and park category

#### chart of average playground use by picnic area status and by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, PicnicArea, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Park_Category_Local, PicnicArea,park_name)]

ggplot(DTplot[!is.na(Park_Category_Local),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = avg_Daily_Users)) +
  facet_grid(PicnicArea~Park_Category_Local, scales = "free_y") +
  xlab("Average Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Average Daily Number of Playground Users Given \n Category and Picnic Area") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

#### chart of median playground use by picnic area status and by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, PicnicArea, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( Park_Category_Local, PicnicArea,park_name)]

ggplot(DTplot[!is.na(Park_Category_Local),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = med_Daily_Users)) +
  facet_grid(PicnicArea~Park_Category_Local, scales = "free_y") +
  xlab("Median Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Median Daily Number of Playground Users Given \n Category and Picnic Area") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`


### playground use by sports field status and park category

#### chart of average playground use by sports field status and by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, SportsField, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Park_Category_Local, SportsField, park_name)]

ggplot(DTplot[!is.na(Park_Category_Local),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = avg_Daily_Users)) +
  facet_grid(SportsField~Park_Category_Local, scales = "free_y") +
  xlab("Average Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Average Daily Number of Playground Users Given \n Category and SportsField") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

#### chart of median playground use by sports field status and by park category

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Park_Category_Local, SportsField, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( Park_Category_Local, SportsField, park_name)]

ggplot(DTplot[!is.na(Park_Category_Local),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = med_Daily_Users)) +
  facet_grid(SportsField~Park_Category_Local, scales = "free_y") +
  xlab("Median Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Median Daily Number of Playground Users Given \n Category and SportsField") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)


```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

### playground use by number of play elements and primary age groups

Primary age group is a status provided by parks managers that designates the age groups that the playground is target for. The two age groups are 5-12 and 2-5. A playground may be designed to serve both.

#### chart of average playground use by number of play elements and by primary age group

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Elements, `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( Elements,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, park_name)][, Elements := as.numeric(Elements)][, `Primary_Age_Group_2-5` := ifelse(`Primary_Age_Group_2-5` == "Yes", "2-5", "")][, `Primary_Age_Group_5-12` := ifelse(`Primary_Age_Group_5-12` == "Yes", "5-12", "")]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = avg_Daily_Users, fill = Elements)) +
  facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y", nrow = 3) +
  #facet_grid(`Primary_Age_Group_2-5` ~ `Primary_Age_Group_5-12`, scales = "free_y") +
  xlab("Average Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Average Daily Number of Playground Users Given \n Primary Age Group and Elements") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

#### chart of median playground use by number of play elements and by primary age group

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Elements, `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( Elements,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, park_name)][, Elements := as.numeric(Elements)][, `Primary_Age_Group_2-5` := ifelse(`Primary_Age_Group_2-5` == "Yes", "2-5", "")][, `Primary_Age_Group_5-12` := ifelse(`Primary_Age_Group_5-12` == "Yes", "5-12", "")]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = med_Daily_Users, fill = Elements)) +
  facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y", nrow = 3) +
  #facet_grid(`Primary_Age_Group_2-5` ~ `Primary_Age_Group_5-12`, scales = "free_y") +
  xlab("Median Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Median Daily Number of Playground Users Given \n Primary Age Group and Elements") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

#### chart of peak playground use by number of play elements and by primary age group

```{r}
DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(max_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Elements, `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, park_name)][,lapply(.SD, max, na.rm = TRUE), .SDcols = c("max_Daily_Users") ,by = .( Elements,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, park_name)][, Elements := as.numeric(Elements)][, `Primary_Age_Group_2-5` := ifelse(`Primary_Age_Group_2-5` == "Yes", "2-5", "")][, `Primary_Age_Group_5-12` := ifelse(`Primary_Age_Group_5-12` == "Yes", "5-12", "")]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = max_Daily_Users, fill = Elements)) +
  facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y", nrow = 3) +
  #facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y") +
  xlab("Max Daily number of playground users") +
  ylab("Park Name") +
  ggtitle("Max Daily Number of Playground Users Given \n Primary Age Group and Elements") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

### playground use by walkscore

#### chart of average playground use by walkscore of park

```{r}

DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, WalkScore, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( WalkScore, park_name)]


ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = as.numeric(WalkScore), fill = avg_Daily_Users, y = reorder(park_name, WalkScore))) +
  xlab("Walkability Score") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Average Daily Users")) +
  ggtitle("Average Daily Number of Playground Users Given \n Walkability Score") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

#### chart of median playground use by walkscore of park

```{r}

DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, WalkScore, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( WalkScore, park_name)]


ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = as.numeric(WalkScore), fill = med_Daily_Users, y = reorder(park_name, WalkScore))) +
  xlab("Walkability Score") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Average Daily Users")) +
  ggtitle("Average Daily Number of Playground Users Given \n Walkability Score") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

### playground use by transit score

#### chart of average playground use by transit score of park

```{r}

DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(avg_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, TransitScore, park_name)][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("avg_Daily_Users") ,by = .( TransitScore, park_name)][, TransitScore := as.numeric(TransitScore)]


ggplot(DTplot[!is.na(TransitScore),]) +
  geom_bar(stat = "identity", position = "stack", aes(x = as.numeric(TransitScore), fill = avg_Daily_Users, y = reorder(park_name, TransitScore))) +
  xlab("Transit Score") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Average Daily Users")) +
  ggtitle("Average Daily Number of Playground Users Given \n Transit Score") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

Notes:

The following parks were excluded for not having a transit score: `r unique(DTplot[is.na(TransitScore),park_name])`

#### chart of median playground use by transit score of park

```{r}

DT <- copy(ParkFull)

DTplot <- DT[playground == 1, .(med_Daily_Users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, TransitScore, park_name)][,lapply(.SD, median, na.rm = TRUE), .SDcols = c("med_Daily_Users") ,by = .( TransitScore, park_name)][, TransitScore := as.numeric(TransitScore)]


ggplot(DTplot[!is.na(TransitScore),]) +
  geom_bar(stat = "identity", position = "stack", aes(x = as.numeric(TransitScore), fill = med_Daily_Users, y = reorder(park_name, TransitScore))) +
  xlab("Transit Score") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Median Daily Users")) +
  ggtitle("Median Daily Number of Playground Users Given \n Transit Score") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")


```

Notes:

The following parks were excluded for not having a transit score: `r unique(DTplot[is.na(TransitScore),park_name])`

## Analyses of playground popularity

These analyses explore the relationship between popularity of a park's playground relative to other characteristics of the park. Playground popularity is defined as the proportion of users who are observed in the playground versus all users. For example, if 20 users were observed in the park, and 10 of those were in the playground, the playground popularity would be 50%. Popularity is based on the total users observed across all days, rather than a daily average. 

### chart of playground popularity by park category

```{r}

DT <- copy(ParkFull[occupied == "Yes"])

DTplot <- DT[, .(users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, park_name, Park_Category_Local, playground)][, .(users = sum(users)),by = .(park_name,  Park_Category_Local, playground)][,allusers := sum(users), by = .(park_name, Park_Category_Local)][playground == 1, popularity := users/allusers][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("popularity") ,by = .(park_name, Park_Category_Local)]


ggplot(DTplot[!(is.na(Park_Category_Local)),]) +
  geom_bar(stat = "identity", position = "stack", aes(y = reorder(park_name,popularity), x = popularity)) +
  #facet_grid(~Park_Category_Local, scales = "free_y", space = "free") +
  facet_wrap(~Park_Category_Local, scales = "free_y", ncol = 2) +
  xlab("Playground Popularity Rate") +
  ylab("Park Name") +
  ggtitle("Playground Popularity Given \n Category") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma)
```

Notes:

The following parks were excluded for not having category status: `r unique(DTplot[is.na(Park_Category_Local),park_name])`

### chart of playground popularity by play elements

```{r}

DT <- copy(ParkFull[occupied == "Yes"])

DTplot <- DT[, .(users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, park_name, Elements, playground)][, .(users = sum(users)),by = .(park_name,  Elements, playground)][,allusers := sum(users), by = .(park_name, Elements)][playground == 1, popularity := users/allusers][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("popularity") ,by = .(park_name, Elements)][, Elements := as.numeric(Elements)]

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(x = Elements, fill = popularity, y = reorder(park_name, Elements))) +
  xlab("Number of Elements") +
  ylab("Park Name") +
  guides(fill=guide_legend(title="Popularity Rate")) +
  ggtitle("Playground Popularity Rate Given \n Number of Elements") +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")
```
### chart of playground popularity by number of play elements and by primary age group

Primary age group is a status provided by parks managers that designates the age groups that the playground is target for. The two age groups are 5-12 and 2-5. A playground may be designed to serve both.

```{r}

DT <- copy(ParkFull[occupied == "Yes"])

DTplot <- DT[, .(users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat, num_adult_prim, num_adult_snd, num_adult_tert, num_adult_quat, num_senior_prim, num_senior_snd, num_senior_tert, num_senior_quat, na.rm = TRUE)), by = .(datePOSIX, Elements, park_name,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, playground)][, .(users = sum(users)),by = .(Elements, park_name,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, playground)][,allusers := sum(users), by = .( Elements, park_name,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`)][playground == 1, popularity := users/allusers][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("popularity") ,by = .(Elements, park_name, `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`)][, Elements := as.numeric(Elements)][, `Primary_Age_Group_2-5` := ifelse(`Primary_Age_Group_2-5` == "Yes", "2-5", "")][, `Primary_Age_Group_5-12` := ifelse(`Primary_Age_Group_5-12` == "Yes", "5-12", "")]


ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = popularity, fill = Elements)) +
  facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y", nrow = 3) +
  #facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y") +
  xlab("Popularity") +
  ylab("Park Name") +
  ggtitle("Playground Popularity Given \n Primary Age Group and Elements") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")

```

### chart of playground popularity among children and teens by number of play elements and by primary age group

Here, popularity is:

$\frac{\text{num of children and teens in playground}} {\text{num of children and teens in park}}$

```{r}

DT <- copy(ParkFull[occupied == "Yes"])

DTplot <- DT[, .(users = sum(num_child_prim, num_child_snd, num_child_tert, num_child_quat, num_teen_prim, num_teen_snd, num_teen_tert, num_teen_quat,  na.rm = TRUE)), by = .(datePOSIX, Elements, park_name,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, playground)][, .(users = sum(users)),by = .(Elements, park_name,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`, playground)][,allusers := sum(users), by = .( Elements, park_name,  `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`)][playground == 1, popularity := users/allusers][,lapply(.SD, mean, na.rm = TRUE), .SDcols = c("popularity") ,by = .(Elements, park_name, `Primary_Age_Group_2-5`, `Primary_Age_Group_5-12`)][, Elements := as.numeric(Elements)][, `Primary_Age_Group_2-5` := ifelse(`Primary_Age_Group_2-5` == "Yes", "2-5", "No")][, `Primary_Age_Group_5-12` := ifelse(`Primary_Age_Group_5-12` == "Yes", "5-12", "No")]


ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = popularity, fill = Elements)) +
  facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y", nrow = 3) +
  #facet_wrap(~`Primary_Age_Group_2-5` + `Primary_Age_Group_5-12`, scales = "free_y") +
  xlab("Popularity") +
  ylab("Park Name") +
  ggtitle("Playground Popularity Among Children Given \n Primary Age Group and Elements") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  scale_y_discrete(limits = rev) +
  scale_x_continuous(labels = scales::comma) +
  scale_fill_gradient(low = "orange", high = "aquamarine")

```




Notes:

The following parks were excluded for not having a playground installation date: `r unique(DTplot[is.na("Playground_Age"),park_name])`

## Analysis of playground age opportunity area by park categtory

```{r}
DT <- copy(ParkFull)

DTplot <- unique(DT[, Playground_Age := (2024-as.numeric(DT$Playground_Age)) +1][, .(park_name, Playground_Age, Opportunity_Area)])

ggplot(DTplot) +
  geom_bar(stat = "identity", position = "stack", aes(y = park_name, x = Playground_Age)) +
  facet_wrap(~Opportunity_Area, scales = "free_y") +
  xlab("Years Age of Playground (1 = Built in 2024)") +
  ylab("Park Name") +
  ggtitle("Playground Age Given Opportunity Area Status") +
  scale_y_discrete(limits = rev)



```

